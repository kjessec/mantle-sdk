// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BlockHeader block header
//
// swagger:model BlockHeader
type BlockHeader struct {

	// app hash
	AppHash Hash `json:"app_hash,omitempty"`

	// chain id
	ChainID string `json:"chain_id,omitempty"`

	// consensus hash
	ConsensusHash Hash `json:"consensus_hash,omitempty"`

	// data hash
	DataHash Hash `json:"data_hash,omitempty"`

	// evidence hash
	EvidenceHash Hash `json:"evidence_hash,omitempty"`

	// height
	Height string `json:"height,omitempty"`

	// last block id
	LastBlockID *BlockID `json:"last_block_id,omitempty"`

	// last commit hash
	LastCommitHash Hash `json:"last_commit_hash,omitempty"`

	// last results hash
	LastResultsHash Hash `json:"last_results_hash,omitempty"`

	// next validators hash
	NextValidatorsHash Hash `json:"next_validators_hash,omitempty"`

	// num txs
	NumTxs string `json:"num_txs,omitempty"`

	// proposer address
	ProposerAddress Address `json:"proposer_address,omitempty"`

	// time
	Time string `json:"time,omitempty"`

	// total txs
	TotalTxs string `json:"total_txs,omitempty"`

	// validators hash
	ValidatorsHash Hash `json:"validators_hash,omitempty"`

	// version
	Version *BlockHeaderVersion `json:"version,omitempty"`
}

// Validate validates this block header
func (m *BlockHeader) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppHash(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConsensusHash(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataHash(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEvidenceHash(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastBlockID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastCommitHash(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastResultsHash(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNextValidatorsHash(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProposerAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidatorsHash(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BlockHeader) validateAppHash(formats strfmt.Registry) error {

	if swag.IsZero(m.AppHash) { // not required
		return nil
	}

	if err := m.AppHash.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("app_hash")
		}
		return err
	}

	return nil
}

func (m *BlockHeader) validateConsensusHash(formats strfmt.Registry) error {

	if swag.IsZero(m.ConsensusHash) { // not required
		return nil
	}

	if err := m.ConsensusHash.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("consensus_hash")
		}
		return err
	}

	return nil
}

func (m *BlockHeader) validateDataHash(formats strfmt.Registry) error {

	if swag.IsZero(m.DataHash) { // not required
		return nil
	}

	if err := m.DataHash.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("data_hash")
		}
		return err
	}

	return nil
}

func (m *BlockHeader) validateEvidenceHash(formats strfmt.Registry) error {

	if swag.IsZero(m.EvidenceHash) { // not required
		return nil
	}

	if err := m.EvidenceHash.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("evidence_hash")
		}
		return err
	}

	return nil
}

func (m *BlockHeader) validateLastBlockID(formats strfmt.Registry) error {

	if swag.IsZero(m.LastBlockID) { // not required
		return nil
	}

	if m.LastBlockID != nil {
		if err := m.LastBlockID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_block_id")
			}
			return err
		}
	}

	return nil
}

func (m *BlockHeader) validateLastCommitHash(formats strfmt.Registry) error {

	if swag.IsZero(m.LastCommitHash) { // not required
		return nil
	}

	if err := m.LastCommitHash.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("last_commit_hash")
		}
		return err
	}

	return nil
}

func (m *BlockHeader) validateLastResultsHash(formats strfmt.Registry) error {

	if swag.IsZero(m.LastResultsHash) { // not required
		return nil
	}

	if err := m.LastResultsHash.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("last_results_hash")
		}
		return err
	}

	return nil
}

func (m *BlockHeader) validateNextValidatorsHash(formats strfmt.Registry) error {

	if swag.IsZero(m.NextValidatorsHash) { // not required
		return nil
	}

	if err := m.NextValidatorsHash.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("next_validators_hash")
		}
		return err
	}

	return nil
}

func (m *BlockHeader) validateProposerAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.ProposerAddress) { // not required
		return nil
	}

	if err := m.ProposerAddress.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("proposer_address")
		}
		return err
	}

	return nil
}

func (m *BlockHeader) validateValidatorsHash(formats strfmt.Registry) error {

	if swag.IsZero(m.ValidatorsHash) { // not required
		return nil
	}

	if err := m.ValidatorsHash.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("validators_hash")
		}
		return err
	}

	return nil
}

func (m *BlockHeader) validateVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.Version) { // not required
		return nil
	}

	if m.Version != nil {
		if err := m.Version.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("version")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BlockHeader) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BlockHeader) UnmarshalBinary(b []byte) error {
	var res BlockHeader
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BlockHeaderVersion block header version
//
// swagger:model BlockHeaderVersion
type BlockHeaderVersion struct {

	// app
	App string `json:"app,omitempty"`

	// block
	Block string `json:"block,omitempty"`
}

// Validate validates this block header version
func (m *BlockHeaderVersion) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BlockHeaderVersion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BlockHeaderVersion) UnmarshalBinary(b []byte) error {
	var res BlockHeaderVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
