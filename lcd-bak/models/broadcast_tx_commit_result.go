// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BroadcastTxCommitResult broadcast tx commit result
//
// swagger:model BroadcastTxCommitResult
type BroadcastTxCommitResult struct {

	// check tx
	CheckTx *CheckTxResult `json:"check_tx,omitempty"`

	// deliver tx
	DeliverTx *DeliverTxResult `json:"deliver_tx,omitempty"`

	// hash
	Hash Hash `json:"hash,omitempty"`

	// height
	Height int64 `json:"height,omitempty"`
}

// Validate validates this broadcast tx commit result
func (m *BroadcastTxCommitResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCheckTx(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeliverTx(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHash(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BroadcastTxCommitResult) validateCheckTx(formats strfmt.Registry) error {

	if swag.IsZero(m.CheckTx) { // not required
		return nil
	}

	if m.CheckTx != nil {
		if err := m.CheckTx.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("check_tx")
			}
			return err
		}
	}

	return nil
}

func (m *BroadcastTxCommitResult) validateDeliverTx(formats strfmt.Registry) error {

	if swag.IsZero(m.DeliverTx) { // not required
		return nil
	}

	if m.DeliverTx != nil {
		if err := m.DeliverTx.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deliver_tx")
			}
			return err
		}
	}

	return nil
}

func (m *BroadcastTxCommitResult) validateHash(formats strfmt.Registry) error {

	if swag.IsZero(m.Hash) { // not required
		return nil
	}

	if err := m.Hash.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("hash")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BroadcastTxCommitResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BroadcastTxCommitResult) UnmarshalBinary(b []byte) error {
	var res BroadcastTxCommitResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
