// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BaseVestingAccount base vesting account
//
// swagger:model BaseVestingAccount
type BaseVestingAccount struct {

	// base account
	BaseAccount *BaseAccount `json:"BaseAccount,omitempty"`

	// delegated free
	DelegatedFree []*Coin `json:"delegated_free"`

	// delegated vesting
	DelegatedVesting []*Coin `json:"delegated_vesting"`

	// end time
	EndTime string `json:"end_time,omitempty"`

	// original vesting
	OriginalVesting []*Coin `json:"original_vesting"`
}

// Validate validates this base vesting account
func (m *BaseVestingAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBaseAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDelegatedFree(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDelegatedVesting(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOriginalVesting(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BaseVestingAccount) validateBaseAccount(formats strfmt.Registry) error {

	if swag.IsZero(m.BaseAccount) { // not required
		return nil
	}

	if m.BaseAccount != nil {
		if err := m.BaseAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("BaseAccount")
			}
			return err
		}
	}

	return nil
}

func (m *BaseVestingAccount) validateDelegatedFree(formats strfmt.Registry) error {

	if swag.IsZero(m.DelegatedFree) { // not required
		return nil
	}

	for i := 0; i < len(m.DelegatedFree); i++ {
		if swag.IsZero(m.DelegatedFree[i]) { // not required
			continue
		}

		if m.DelegatedFree[i] != nil {
			if err := m.DelegatedFree[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("delegated_free" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BaseVestingAccount) validateDelegatedVesting(formats strfmt.Registry) error {

	if swag.IsZero(m.DelegatedVesting) { // not required
		return nil
	}

	for i := 0; i < len(m.DelegatedVesting); i++ {
		if swag.IsZero(m.DelegatedVesting[i]) { // not required
			continue
		}

		if m.DelegatedVesting[i] != nil {
			if err := m.DelegatedVesting[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("delegated_vesting" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BaseVestingAccount) validateOriginalVesting(formats strfmt.Registry) error {

	if swag.IsZero(m.OriginalVesting) { // not required
		return nil
	}

	for i := 0; i < len(m.OriginalVesting); i++ {
		if swag.IsZero(m.OriginalVesting[i]) { // not required
			continue
		}

		if m.OriginalVesting[i] != nil {
			if err := m.OriginalVesting[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("original_vesting" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *BaseVestingAccount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BaseVestingAccount) UnmarshalBinary(b []byte) error {
	var res BaseVestingAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
