// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TextProposal text proposal
//
// swagger:model TextProposal
type TextProposal struct {

	// description
	Description string `json:"description,omitempty"`

	// final tally result
	FinalTallyResult *TallyResult `json:"final_tally_result,omitempty"`

	// proposal id
	ProposalID int64 `json:"proposal_id,omitempty"`

	// proposal status
	ProposalStatus string `json:"proposal_status,omitempty"`

	// proposal type
	ProposalType string `json:"proposal_type,omitempty"`

	// submit time
	SubmitTime string `json:"submit_time,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// total deposit
	TotalDeposit []*Coin `json:"total_deposit"`

	// voting start time
	VotingStartTime string `json:"voting_start_time,omitempty"`
}

// Validate validates this text proposal
func (m *TextProposal) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFinalTallyResult(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalDeposit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TextProposal) validateFinalTallyResult(formats strfmt.Registry) error {

	if swag.IsZero(m.FinalTallyResult) { // not required
		return nil
	}

	if m.FinalTallyResult != nil {
		if err := m.FinalTallyResult.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("final_tally_result")
			}
			return err
		}
	}

	return nil
}

func (m *TextProposal) validateTotalDeposit(formats strfmt.Registry) error {

	if swag.IsZero(m.TotalDeposit) { // not required
		return nil
	}

	for i := 0; i < len(m.TotalDeposit); i++ {
		if swag.IsZero(m.TotalDeposit[i]) { // not required
			continue
		}

		if m.TotalDeposit[i] != nil {
			if err := m.TotalDeposit[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("total_deposit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TextProposal) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TextProposal) UnmarshalBinary(b []byte) error {
	var res TextProposal
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
