// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MultiSignReq multi sign req
//
// swagger:model MultiSignReq
type MultiSignReq struct {

	// chain id
	ChainID string `json:"chain_id,omitempty"`

	// pubkey
	Pubkey *MultiSignPubKey `json:"pubkey,omitempty"`

	// signature only
	SignatureOnly bool `json:"signature_only,omitempty"`

	// signatures
	Signatures []*StdSignature `json:"signatures"`

	// tx
	Tx *UnsignedStdTx `json:"tx,omitempty"`
}

// Validate validates this multi sign req
func (m *MultiSignReq) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePubkey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignatures(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTx(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MultiSignReq) validatePubkey(formats strfmt.Registry) error {

	if swag.IsZero(m.Pubkey) { // not required
		return nil
	}

	if m.Pubkey != nil {
		if err := m.Pubkey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pubkey")
			}
			return err
		}
	}

	return nil
}

func (m *MultiSignReq) validateSignatures(formats strfmt.Registry) error {

	if swag.IsZero(m.Signatures) { // not required
		return nil
	}

	for i := 0; i < len(m.Signatures); i++ {
		if swag.IsZero(m.Signatures[i]) { // not required
			continue
		}

		if m.Signatures[i] != nil {
			if err := m.Signatures[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("signatures" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MultiSignReq) validateTx(formats strfmt.Registry) error {

	if swag.IsZero(m.Tx) { // not required
		return nil
	}

	if m.Tx != nil {
		if err := m.Tx.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tx")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MultiSignReq) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MultiSignReq) UnmarshalBinary(b []byte) error {
	var res MultiSignReq
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
