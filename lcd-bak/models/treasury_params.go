// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TreasuryParams treasury params
//
// swagger:model TreasuryParams
type TreasuryParams struct {

	// budget share
	BudgetShare float32 `json:"budget_share,omitempty"`

	// mining increment
	MiningIncrement string `json:"mining_increment,omitempty"`

	// oracle share
	OracleShare float32 `json:"oracle_share,omitempty"`

	// reward policy
	RewardPolicy *PolicyConstraints `json:"reward_policy,omitempty"`

	// 67%
	SeigniorageBurdenTarget string `json:"seigniorage_burden_target,omitempty"`

	// tax policy
	TaxPolicy *PolicyConstraints `json:"tax_policy,omitempty"`

	// window long
	WindowLong string `json:"window_long,omitempty"`

	// window probation
	WindowProbation string `json:"window_probation,omitempty"`

	// window short
	WindowShort string `json:"window_short,omitempty"`
}

// Validate validates this treasury params
func (m *TreasuryParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRewardPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaxPolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TreasuryParams) validateRewardPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.RewardPolicy) { // not required
		return nil
	}

	if m.RewardPolicy != nil {
		if err := m.RewardPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reward_policy")
			}
			return err
		}
	}

	return nil
}

func (m *TreasuryParams) validateTaxPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.TaxPolicy) { // not required
		return nil
	}

	if m.TaxPolicy != nil {
		if err := m.TaxPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tax_policy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TreasuryParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TreasuryParams) UnmarshalBinary(b []byte) error {
	var res TreasuryParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
