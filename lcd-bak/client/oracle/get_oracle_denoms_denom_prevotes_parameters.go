// Code generated by go-swagger; DO NOT EDIT.

package oracle

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetOracleDenomsDenomPrevotesParams creates a new GetOracleDenomsDenomPrevotesParams object
// with the default values initialized.
func NewGetOracleDenomsDenomPrevotesParams() *GetOracleDenomsDenomPrevotesParams {
	var ()
	return &GetOracleDenomsDenomPrevotesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetOracleDenomsDenomPrevotesParamsWithTimeout creates a new GetOracleDenomsDenomPrevotesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetOracleDenomsDenomPrevotesParamsWithTimeout(timeout time.Duration) *GetOracleDenomsDenomPrevotesParams {
	var ()
	return &GetOracleDenomsDenomPrevotesParams{

		timeout: timeout,
	}
}

// NewGetOracleDenomsDenomPrevotesParamsWithContext creates a new GetOracleDenomsDenomPrevotesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetOracleDenomsDenomPrevotesParamsWithContext(ctx context.Context) *GetOracleDenomsDenomPrevotesParams {
	var ()
	return &GetOracleDenomsDenomPrevotesParams{

		Context: ctx,
	}
}

// NewGetOracleDenomsDenomPrevotesParamsWithHTTPClient creates a new GetOracleDenomsDenomPrevotesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetOracleDenomsDenomPrevotesParamsWithHTTPClient(client *http.Client) *GetOracleDenomsDenomPrevotesParams {
	var ()
	return &GetOracleDenomsDenomPrevotesParams{
		HTTPClient: client,
	}
}

/*GetOracleDenomsDenomPrevotesParams contains all the parameters to send to the API endpoint
for the get oracle denoms denom prevotes operation typically these are written to a http.Request
*/
type GetOracleDenomsDenomPrevotesParams struct {

	/*Denom
	  The coin denom to get

	*/
	Denom string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get oracle denoms denom prevotes params
func (o *GetOracleDenomsDenomPrevotesParams) WithTimeout(timeout time.Duration) *GetOracleDenomsDenomPrevotesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get oracle denoms denom prevotes params
func (o *GetOracleDenomsDenomPrevotesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get oracle denoms denom prevotes params
func (o *GetOracleDenomsDenomPrevotesParams) WithContext(ctx context.Context) *GetOracleDenomsDenomPrevotesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get oracle denoms denom prevotes params
func (o *GetOracleDenomsDenomPrevotesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get oracle denoms denom prevotes params
func (o *GetOracleDenomsDenomPrevotesParams) WithHTTPClient(client *http.Client) *GetOracleDenomsDenomPrevotesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get oracle denoms denom prevotes params
func (o *GetOracleDenomsDenomPrevotesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDenom adds the denom to the get oracle denoms denom prevotes params
func (o *GetOracleDenomsDenomPrevotesParams) WithDenom(denom string) *GetOracleDenomsDenomPrevotesParams {
	o.SetDenom(denom)
	return o
}

// SetDenom adds the denom to the get oracle denoms denom prevotes params
func (o *GetOracleDenomsDenomPrevotesParams) SetDenom(denom string) {
	o.Denom = denom
}

// WriteToRequest writes these params to a swagger request
func (o *GetOracleDenomsDenomPrevotesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param denom
	if err := r.SetPathParam("denom", o.Denom); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
