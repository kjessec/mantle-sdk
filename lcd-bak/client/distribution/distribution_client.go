// Code generated by go-swagger; DO NOT EDIT.

package distribution

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new distribution API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for distribution API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetDistributionCommunityPool(params *GetDistributionCommunityPoolParams) (*GetDistributionCommunityPoolOK, error)

	GetDistributionDelegatorsDelegatorAddrRewards(params *GetDistributionDelegatorsDelegatorAddrRewardsParams) (*GetDistributionDelegatorsDelegatorAddrRewardsOK, error)

	GetDistributionDelegatorsDelegatorAddrRewardsValidatorAddr(params *GetDistributionDelegatorsDelegatorAddrRewardsValidatorAddrParams) (*GetDistributionDelegatorsDelegatorAddrRewardsValidatorAddrOK, error)

	GetDistributionDelegatorsDelegatorAddrWithdrawAddress(params *GetDistributionDelegatorsDelegatorAddrWithdrawAddressParams) (*GetDistributionDelegatorsDelegatorAddrWithdrawAddressOK, error)

	GetDistributionParameters(params *GetDistributionParametersParams) (*GetDistributionParametersOK, error)

	GetDistributionValidatorsValidatorAddr(params *GetDistributionValidatorsValidatorAddrParams) (*GetDistributionValidatorsValidatorAddrOK, error)

	GetDistributionValidatorsValidatorAddrOutstandingRewards(params *GetDistributionValidatorsValidatorAddrOutstandingRewardsParams) (*GetDistributionValidatorsValidatorAddrOutstandingRewardsOK, error)

	GetDistributionValidatorsValidatorAddrRewards(params *GetDistributionValidatorsValidatorAddrRewardsParams) (*GetDistributionValidatorsValidatorAddrRewardsOK, error)

	PostDistributionDelegatorsDelegatorAddrRewards(params *PostDistributionDelegatorsDelegatorAddrRewardsParams) (*PostDistributionDelegatorsDelegatorAddrRewardsOK, error)

	PostDistributionDelegatorsDelegatorAddrRewardsValidatorAddr(params *PostDistributionDelegatorsDelegatorAddrRewardsValidatorAddrParams) (*PostDistributionDelegatorsDelegatorAddrRewardsValidatorAddrOK, error)

	PostDistributionDelegatorsDelegatorAddrWithdrawAddress(params *PostDistributionDelegatorsDelegatorAddrWithdrawAddressParams) (*PostDistributionDelegatorsDelegatorAddrWithdrawAddressOK, error)

	PostDistributionValidatorsValidatorAddrRewards(params *PostDistributionValidatorsValidatorAddrRewardsParams) (*PostDistributionValidatorsValidatorAddrRewardsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetDistributionCommunityPool communities pool parameters
*/
func (a *Client) GetDistributionCommunityPool(params *GetDistributionCommunityPoolParams) (*GetDistributionCommunityPoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDistributionCommunityPoolParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDistributionCommunityPool",
		Method:             "GET",
		PathPattern:        "/distribution/community_pool",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDistributionCommunityPoolReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDistributionCommunityPoolOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDistributionCommunityPool: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDistributionDelegatorsDelegatorAddrRewards gets the total rewards balance from all delegations

  Get the sum of all the rewards earned by delegations by a single delegator
*/
func (a *Client) GetDistributionDelegatorsDelegatorAddrRewards(params *GetDistributionDelegatorsDelegatorAddrRewardsParams) (*GetDistributionDelegatorsDelegatorAddrRewardsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDistributionDelegatorsDelegatorAddrRewardsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDistributionDelegatorsDelegatorAddrRewards",
		Method:             "GET",
		PathPattern:        "/distribution/delegators/{delegatorAddr}/rewards",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDistributionDelegatorsDelegatorAddrRewardsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDistributionDelegatorsDelegatorAddrRewardsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDistributionDelegatorsDelegatorAddrRewards: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDistributionDelegatorsDelegatorAddrRewardsValidatorAddr queries a delegation reward

  Query a single delegation reward by a delegator
*/
func (a *Client) GetDistributionDelegatorsDelegatorAddrRewardsValidatorAddr(params *GetDistributionDelegatorsDelegatorAddrRewardsValidatorAddrParams) (*GetDistributionDelegatorsDelegatorAddrRewardsValidatorAddrOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDistributionDelegatorsDelegatorAddrRewardsValidatorAddrParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDistributionDelegatorsDelegatorAddrRewardsValidatorAddr",
		Method:             "GET",
		PathPattern:        "/distribution/delegators/{delegatorAddr}/rewards/{validatorAddr}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDistributionDelegatorsDelegatorAddrRewardsValidatorAddrReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDistributionDelegatorsDelegatorAddrRewardsValidatorAddrOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDistributionDelegatorsDelegatorAddrRewardsValidatorAddr: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDistributionDelegatorsDelegatorAddrWithdrawAddress gets the rewards withdrawal address

  Get the delegations' rewards withdrawal address. This is the address in which the user will receive the reward funds
*/
func (a *Client) GetDistributionDelegatorsDelegatorAddrWithdrawAddress(params *GetDistributionDelegatorsDelegatorAddrWithdrawAddressParams) (*GetDistributionDelegatorsDelegatorAddrWithdrawAddressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDistributionDelegatorsDelegatorAddrWithdrawAddressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDistributionDelegatorsDelegatorAddrWithdrawAddress",
		Method:             "GET",
		PathPattern:        "/distribution/delegators/{delegatorAddr}/withdraw_address",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDistributionDelegatorsDelegatorAddrWithdrawAddressReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDistributionDelegatorsDelegatorAddrWithdrawAddressOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDistributionDelegatorsDelegatorAddrWithdrawAddress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDistributionParameters fees distribution parameters
*/
func (a *Client) GetDistributionParameters(params *GetDistributionParametersParams) (*GetDistributionParametersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDistributionParametersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDistributionParameters",
		Method:             "GET",
		PathPattern:        "/distribution/parameters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDistributionParametersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDistributionParametersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDistributionParameters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDistributionValidatorsValidatorAddr validators distribution information

  Query the distribution information of a single validator
*/
func (a *Client) GetDistributionValidatorsValidatorAddr(params *GetDistributionValidatorsValidatorAddrParams) (*GetDistributionValidatorsValidatorAddrOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDistributionValidatorsValidatorAddrParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDistributionValidatorsValidatorAddr",
		Method:             "GET",
		PathPattern:        "/distribution/validators/{validatorAddr}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDistributionValidatorsValidatorAddrReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDistributionValidatorsValidatorAddrOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDistributionValidatorsValidatorAddr: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDistributionValidatorsValidatorAddrOutstandingRewards fees distribution outstanding rewards of a single validator
*/
func (a *Client) GetDistributionValidatorsValidatorAddrOutstandingRewards(params *GetDistributionValidatorsValidatorAddrOutstandingRewardsParams) (*GetDistributionValidatorsValidatorAddrOutstandingRewardsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDistributionValidatorsValidatorAddrOutstandingRewardsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDistributionValidatorsValidatorAddrOutstandingRewards",
		Method:             "GET",
		PathPattern:        "/distribution/validators/{validatorAddr}/outstanding_rewards",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDistributionValidatorsValidatorAddrOutstandingRewardsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDistributionValidatorsValidatorAddrOutstandingRewardsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDistributionValidatorsValidatorAddrOutstandingRewards: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDistributionValidatorsValidatorAddrRewards commissions and self delegation rewards of a single validator

  Query the commission and self-delegation rewards of validator.
*/
func (a *Client) GetDistributionValidatorsValidatorAddrRewards(params *GetDistributionValidatorsValidatorAddrRewardsParams) (*GetDistributionValidatorsValidatorAddrRewardsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDistributionValidatorsValidatorAddrRewardsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDistributionValidatorsValidatorAddrRewards",
		Method:             "GET",
		PathPattern:        "/distribution/validators/{validatorAddr}/rewards",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDistributionValidatorsValidatorAddrRewardsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDistributionValidatorsValidatorAddrRewardsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDistributionValidatorsValidatorAddrRewards: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDistributionDelegatorsDelegatorAddrRewards withdraws all the delegator s delegation rewards

  Withdraw all the delegator's delegation rewards
*/
func (a *Client) PostDistributionDelegatorsDelegatorAddrRewards(params *PostDistributionDelegatorsDelegatorAddrRewardsParams) (*PostDistributionDelegatorsDelegatorAddrRewardsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDistributionDelegatorsDelegatorAddrRewardsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDistributionDelegatorsDelegatorAddrRewards",
		Method:             "POST",
		PathPattern:        "/distribution/delegators/{delegatorAddr}/rewards",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDistributionDelegatorsDelegatorAddrRewardsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDistributionDelegatorsDelegatorAddrRewardsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostDistributionDelegatorsDelegatorAddrRewards: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDistributionDelegatorsDelegatorAddrRewardsValidatorAddr withdraws a delegation reward

  Withdraw a delegator's delegation reward from a single validator
*/
func (a *Client) PostDistributionDelegatorsDelegatorAddrRewardsValidatorAddr(params *PostDistributionDelegatorsDelegatorAddrRewardsValidatorAddrParams) (*PostDistributionDelegatorsDelegatorAddrRewardsValidatorAddrOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDistributionDelegatorsDelegatorAddrRewardsValidatorAddrParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDistributionDelegatorsDelegatorAddrRewardsValidatorAddr",
		Method:             "POST",
		PathPattern:        "/distribution/delegators/{delegatorAddr}/rewards/{validatorAddr}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDistributionDelegatorsDelegatorAddrRewardsValidatorAddrReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDistributionDelegatorsDelegatorAddrRewardsValidatorAddrOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostDistributionDelegatorsDelegatorAddrRewardsValidatorAddr: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDistributionDelegatorsDelegatorAddrWithdrawAddress replaces the rewards withdrawal address

  Replace the delegations' rewards withdrawal address for a new one.
*/
func (a *Client) PostDistributionDelegatorsDelegatorAddrWithdrawAddress(params *PostDistributionDelegatorsDelegatorAddrWithdrawAddressParams) (*PostDistributionDelegatorsDelegatorAddrWithdrawAddressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDistributionDelegatorsDelegatorAddrWithdrawAddressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDistributionDelegatorsDelegatorAddrWithdrawAddress",
		Method:             "POST",
		PathPattern:        "/distribution/delegators/{delegatorAddr}/withdraw_address",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDistributionDelegatorsDelegatorAddrWithdrawAddressReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDistributionDelegatorsDelegatorAddrWithdrawAddressOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostDistributionDelegatorsDelegatorAddrWithdrawAddress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDistributionValidatorsValidatorAddrRewards withdraws the validator s rewards

  Withdraw the validator's self-delegation and commissions rewards
*/
func (a *Client) PostDistributionValidatorsValidatorAddrRewards(params *PostDistributionValidatorsValidatorAddrRewardsParams) (*PostDistributionValidatorsValidatorAddrRewardsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDistributionValidatorsValidatorAddrRewardsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDistributionValidatorsValidatorAddrRewards",
		Method:             "POST",
		PathPattern:        "/distribution/validators/{validatorAddr}/rewards",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDistributionValidatorsValidatorAddrRewardsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDistributionValidatorsValidatorAddrRewardsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostDistributionValidatorsValidatorAddrRewards: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
