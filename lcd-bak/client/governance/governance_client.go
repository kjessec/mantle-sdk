// Code generated by go-swagger; DO NOT EDIT.

package governance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new governance API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for governance API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetGovParametersDeposit(params *GetGovParametersDepositParams) (*GetGovParametersDepositOK, error)

	GetGovParametersTallying(params *GetGovParametersTallyingParams) (*GetGovParametersTallyingOK, error)

	GetGovParametersVoting(params *GetGovParametersVotingParams) (*GetGovParametersVotingOK, error)

	GetGovProposals(params *GetGovProposalsParams) (*GetGovProposalsOK, error)

	GetGovProposalsProposalID(params *GetGovProposalsProposalIDParams) (*GetGovProposalsProposalIDOK, error)

	GetGovProposalsProposalIDDeposits(params *GetGovProposalsProposalIDDepositsParams) (*GetGovProposalsProposalIDDepositsOK, error)

	GetGovProposalsProposalIDDepositsDepositor(params *GetGovProposalsProposalIDDepositsDepositorParams) (*GetGovProposalsProposalIDDepositsDepositorOK, error)

	GetGovProposalsProposalIDProposer(params *GetGovProposalsProposalIDProposerParams) (*GetGovProposalsProposalIDProposerOK, error)

	GetGovProposalsProposalIDTally(params *GetGovProposalsProposalIDTallyParams) (*GetGovProposalsProposalIDTallyOK, error)

	GetGovProposalsProposalIDVotes(params *GetGovProposalsProposalIDVotesParams) (*GetGovProposalsProposalIDVotesOK, error)

	GetGovProposalsProposalIDVotesVoter(params *GetGovProposalsProposalIDVotesVoterParams) (*GetGovProposalsProposalIDVotesVoterOK, error)

	PostGovProposals(params *PostGovProposalsParams) (*PostGovProposalsOK, error)

	PostGovProposalsCommunityPoolSpend(params *PostGovProposalsCommunityPoolSpendParams) (*PostGovProposalsCommunityPoolSpendOK, error)

	PostGovProposalsParamChange(params *PostGovProposalsParamChangeParams) (*PostGovProposalsParamChangeOK, error)

	PostGovProposalsProposalIDDeposits(params *PostGovProposalsProposalIDDepositsParams) (*PostGovProposalsProposalIDDepositsOK, error)

	PostGovProposalsProposalIDVotes(params *PostGovProposalsProposalIDVotesParams) (*PostGovProposalsProposalIDVotesOK, error)

	PostGovProposalsRewardWeightUpdate(params *PostGovProposalsRewardWeightUpdateParams) (*PostGovProposalsRewardWeightUpdateOK, error)

	PostGovProposalsTaxRateUpdate(params *PostGovProposalsTaxRateUpdateParams) (*PostGovProposalsTaxRateUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetGovParametersDeposit queries governance deposit parameters

  Query governance deposit parameters. The max_deposit_period units are in nanoseconds.
*/
func (a *Client) GetGovParametersDeposit(params *GetGovParametersDepositParams) (*GetGovParametersDepositOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGovParametersDepositParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetGovParametersDeposit",
		Method:             "GET",
		PathPattern:        "/gov/parameters/deposit",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGovParametersDepositReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGovParametersDepositOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetGovParametersDeposit: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetGovParametersTallying queries governance tally parameters

  Query governance tally parameters
*/
func (a *Client) GetGovParametersTallying(params *GetGovParametersTallyingParams) (*GetGovParametersTallyingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGovParametersTallyingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetGovParametersTallying",
		Method:             "GET",
		PathPattern:        "/gov/parameters/tallying",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGovParametersTallyingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGovParametersTallyingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetGovParametersTallying: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetGovParametersVoting queries governance voting parameters

  Query governance voting parameters. The voting_period units are in nanoseconds.
*/
func (a *Client) GetGovParametersVoting(params *GetGovParametersVotingParams) (*GetGovParametersVotingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGovParametersVotingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetGovParametersVoting",
		Method:             "GET",
		PathPattern:        "/gov/parameters/voting",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGovParametersVotingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGovParametersVotingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetGovParametersVoting: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetGovProposals queries proposals

  Query proposals information with parameters
*/
func (a *Client) GetGovProposals(params *GetGovProposalsParams) (*GetGovProposalsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGovProposalsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetGovProposals",
		Method:             "GET",
		PathPattern:        "/gov/proposals",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGovProposalsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGovProposalsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetGovProposals: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetGovProposalsProposalID queries a proposal

  Query a proposal by id
*/
func (a *Client) GetGovProposalsProposalID(params *GetGovProposalsProposalIDParams) (*GetGovProposalsProposalIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGovProposalsProposalIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetGovProposalsProposalID",
		Method:             "GET",
		PathPattern:        "/gov/proposals/{proposalId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGovProposalsProposalIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGovProposalsProposalIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetGovProposalsProposalID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetGovProposalsProposalIDDeposits queries deposits

  Query deposits by proposalId
*/
func (a *Client) GetGovProposalsProposalIDDeposits(params *GetGovProposalsProposalIDDepositsParams) (*GetGovProposalsProposalIDDepositsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGovProposalsProposalIDDepositsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetGovProposalsProposalIDDeposits",
		Method:             "GET",
		PathPattern:        "/gov/proposals/{proposalId}/deposits",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGovProposalsProposalIDDepositsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGovProposalsProposalIDDepositsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetGovProposalsProposalIDDeposits: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetGovProposalsProposalIDDepositsDepositor queries deposit

  Query deposit by proposalId and depositor address
*/
func (a *Client) GetGovProposalsProposalIDDepositsDepositor(params *GetGovProposalsProposalIDDepositsDepositorParams) (*GetGovProposalsProposalIDDepositsDepositorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGovProposalsProposalIDDepositsDepositorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetGovProposalsProposalIDDepositsDepositor",
		Method:             "GET",
		PathPattern:        "/gov/proposals/{proposalId}/deposits/{depositor}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGovProposalsProposalIDDepositsDepositorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGovProposalsProposalIDDepositsDepositorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetGovProposalsProposalIDDepositsDepositor: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetGovProposalsProposalIDProposer queries proposer

  Query for the proposer for a proposal
*/
func (a *Client) GetGovProposalsProposalIDProposer(params *GetGovProposalsProposalIDProposerParams) (*GetGovProposalsProposalIDProposerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGovProposalsProposalIDProposerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetGovProposalsProposalIDProposer",
		Method:             "GET",
		PathPattern:        "/gov/proposals/{proposalId}/proposer",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGovProposalsProposalIDProposerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGovProposalsProposalIDProposerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetGovProposalsProposalIDProposer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetGovProposalsProposalIDTally gets a proposal s tally result at the current time

  Gets a proposal's tally result at the current time. If the proposal is pending deposits (i.e status 'DepositPeriod') it returns an empty tally result.
*/
func (a *Client) GetGovProposalsProposalIDTally(params *GetGovProposalsProposalIDTallyParams) (*GetGovProposalsProposalIDTallyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGovProposalsProposalIDTallyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetGovProposalsProposalIDTally",
		Method:             "GET",
		PathPattern:        "/gov/proposals/{proposalId}/tally",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGovProposalsProposalIDTallyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGovProposalsProposalIDTallyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetGovProposalsProposalIDTally: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetGovProposalsProposalIDVotes queries voters

  Query voters information by proposalId
*/
func (a *Client) GetGovProposalsProposalIDVotes(params *GetGovProposalsProposalIDVotesParams) (*GetGovProposalsProposalIDVotesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGovProposalsProposalIDVotesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetGovProposalsProposalIDVotes",
		Method:             "GET",
		PathPattern:        "/gov/proposals/{proposalId}/votes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGovProposalsProposalIDVotesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGovProposalsProposalIDVotesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetGovProposalsProposalIDVotes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetGovProposalsProposalIDVotesVoter queries vote

  Query vote information by proposal Id and voter address
*/
func (a *Client) GetGovProposalsProposalIDVotesVoter(params *GetGovProposalsProposalIDVotesVoterParams) (*GetGovProposalsProposalIDVotesVoterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGovProposalsProposalIDVotesVoterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetGovProposalsProposalIDVotesVoter",
		Method:             "GET",
		PathPattern:        "/gov/proposals/{proposalId}/votes/{voter}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGovProposalsProposalIDVotesVoterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGovProposalsProposalIDVotesVoterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetGovProposalsProposalIDVotesVoter: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostGovProposals submits a proposal

  Send transaction to submit a proposal
*/
func (a *Client) PostGovProposals(params *PostGovProposalsParams) (*PostGovProposalsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostGovProposalsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostGovProposals",
		Method:             "POST",
		PathPattern:        "/gov/proposals",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostGovProposalsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostGovProposalsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostGovProposals: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostGovProposalsCommunityPoolSpend grants community pool coins to contributor

  Generate a community pool spend transaction
*/
func (a *Client) PostGovProposalsCommunityPoolSpend(params *PostGovProposalsCommunityPoolSpendParams) (*PostGovProposalsCommunityPoolSpendOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostGovProposalsCommunityPoolSpendParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostGovProposalsCommunityPoolSpend",
		Method:             "POST",
		PathPattern:        "/gov/proposals/community_pool_spend",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostGovProposalsCommunityPoolSpendReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostGovProposalsCommunityPoolSpendOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostGovProposalsCommunityPoolSpend: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostGovProposalsParamChange generates a parameter change proposal transaction

  Generate a parameter change proposal transaction
*/
func (a *Client) PostGovProposalsParamChange(params *PostGovProposalsParamChangeParams) (*PostGovProposalsParamChangeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostGovProposalsParamChangeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostGovProposalsParamChange",
		Method:             "POST",
		PathPattern:        "/gov/proposals/param_change",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostGovProposalsParamChangeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostGovProposalsParamChangeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostGovProposalsParamChange: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostGovProposalsProposalIDDeposits deposits tokens to a proposal

  Send transaction to deposit tokens to a proposal
*/
func (a *Client) PostGovProposalsProposalIDDeposits(params *PostGovProposalsProposalIDDepositsParams) (*PostGovProposalsProposalIDDepositsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostGovProposalsProposalIDDepositsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostGovProposalsProposalIDDeposits",
		Method:             "POST",
		PathPattern:        "/gov/proposals/{proposalId}/deposits",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostGovProposalsProposalIDDepositsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostGovProposalsProposalIDDepositsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostGovProposalsProposalIDDeposits: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostGovProposalsProposalIDVotes votes a proposal

  Send transaction to vote a proposal
*/
func (a *Client) PostGovProposalsProposalIDVotes(params *PostGovProposalsProposalIDVotesParams) (*PostGovProposalsProposalIDVotesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostGovProposalsProposalIDVotesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostGovProposalsProposalIDVotes",
		Method:             "POST",
		PathPattern:        "/gov/proposals/{proposalId}/votes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostGovProposalsProposalIDVotesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostGovProposalsProposalIDVotesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostGovProposalsProposalIDVotes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostGovProposalsRewardWeightUpdate rewards weight update proposal

  Generate a reward weight update transaction
*/
func (a *Client) PostGovProposalsRewardWeightUpdate(params *PostGovProposalsRewardWeightUpdateParams) (*PostGovProposalsRewardWeightUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostGovProposalsRewardWeightUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostGovProposalsRewardWeightUpdate",
		Method:             "POST",
		PathPattern:        "/gov/proposals/reward_weight_update",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostGovProposalsRewardWeightUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostGovProposalsRewardWeightUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostGovProposalsRewardWeightUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostGovProposalsTaxRateUpdate taxes rate update proposal

  Generate a tax rate update transaction
*/
func (a *Client) PostGovProposalsTaxRateUpdate(params *PostGovProposalsTaxRateUpdateParams) (*PostGovProposalsTaxRateUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostGovProposalsTaxRateUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostGovProposalsTaxRateUpdate",
		Method:             "POST",
		PathPattern:        "/gov/proposals/tax_rate_update",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostGovProposalsTaxRateUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostGovProposalsTaxRateUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostGovProposalsTaxRateUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
