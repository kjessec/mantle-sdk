// Code generated by go-swagger; DO NOT EDIT.

package slashing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new slashing API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for slashing API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetSlashingParameters(params *GetSlashingParametersParams) (*GetSlashingParametersOK, error)

	GetSlashingSigningInfos(params *GetSlashingSigningInfosParams) (*GetSlashingSigningInfosOK, error)

	GetSlashingValidatorsValidatorPubKeySigningInfo(params *GetSlashingValidatorsValidatorPubKeySigningInfoParams) (*GetSlashingValidatorsValidatorPubKeySigningInfoOK, *GetSlashingValidatorsValidatorPubKeySigningInfoNoContent, error)

	PostSlashingValidatorsValidatorAddrUnjail(params *PostSlashingValidatorsValidatorAddrUnjailParams) (*PostSlashingValidatorsValidatorAddrUnjailOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetSlashingParameters gets the current slashing parameters
*/
func (a *Client) GetSlashingParameters(params *GetSlashingParametersParams) (*GetSlashingParametersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSlashingParametersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSlashingParameters",
		Method:             "GET",
		PathPattern:        "/slashing/parameters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSlashingParametersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSlashingParametersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSlashingParameters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSlashingSigningInfos gets sign info of given all validators

  Get sign info of all validators
*/
func (a *Client) GetSlashingSigningInfos(params *GetSlashingSigningInfosParams) (*GetSlashingSigningInfosOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSlashingSigningInfosParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSlashingSigningInfos",
		Method:             "GET",
		PathPattern:        "/slashing/signing_infos",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSlashingSigningInfosReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSlashingSigningInfosOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSlashingSigningInfos: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSlashingValidatorsValidatorPubKeySigningInfo gets sign info of given validator

  Get sign info of given validator
*/
func (a *Client) GetSlashingValidatorsValidatorPubKeySigningInfo(params *GetSlashingValidatorsValidatorPubKeySigningInfoParams) (*GetSlashingValidatorsValidatorPubKeySigningInfoOK, *GetSlashingValidatorsValidatorPubKeySigningInfoNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSlashingValidatorsValidatorPubKeySigningInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSlashingValidatorsValidatorPubKeySigningInfo",
		Method:             "GET",
		PathPattern:        "/slashing/validators/{validatorPubKey}/signing_info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSlashingValidatorsValidatorPubKeySigningInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetSlashingValidatorsValidatorPubKeySigningInfoOK:
		return value, nil, nil
	case *GetSlashingValidatorsValidatorPubKeySigningInfoNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for slashing: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostSlashingValidatorsValidatorAddrUnjail unjails a jailed validator

  Send transaction to unjail a jailed validator
*/
func (a *Client) PostSlashingValidatorsValidatorAddrUnjail(params *PostSlashingValidatorsValidatorAddrUnjailParams) (*PostSlashingValidatorsValidatorAddrUnjailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSlashingValidatorsValidatorAddrUnjailParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostSlashingValidatorsValidatorAddrUnjail",
		Method:             "POST",
		PathPattern:        "/slashing/validators/{validatorAddr}/unjail",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostSlashingValidatorsValidatorAddrUnjailReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSlashingValidatorsValidatorAddrUnjailOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostSlashingValidatorsValidatorAddrUnjail: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
